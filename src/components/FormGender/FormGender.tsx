import { useFormik } from "formik";
import { useState } from "react";
import styles  from './formGender.module.css'

import * as Yup from 'yup'

interface IFormGender {
  name: string;
}

interface IGenderData {
  name: string;
  gender: string;
  probability: number;
  count: number;
}

const schema = Yup.object().shape({ 
name: Yup
.string()
.required('–∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
.typeError('–∑–¥–µ—Å—å –ø–æ–¥–æ–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞')
.min(2, '–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
.max(20, '–∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ ! 20 —Å–∏–º–≤–æ–ª–æ–≤')
});



export default function FormGender() {
  // –∞–Ω–∞–ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ promise –∑–∞–ø—Ä–æ—Å–æ–≤
  // –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–µ–ø–æ—á–∫—É –∏–∑ .then() –∏–ª–∏ –µ–≥–æ

  const [genderData, setGenderData] = useState<IGenderData>({
    name: "",
    gender: "",
    probability: 0,
    count: 0,
  });// –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–ª—é—á –ø—Ü—Å—Ç—ã—à–∫–∞ , –∏–Ω–∞—á–µ –Ω–µ –ø–ø–æ–ø—É—Å—Ç–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞

  const fetchGender = async (name: string) => {
    const res = await fetch(`https://api.genderize.io/?name=${name}`);
    const data = await res.json();
    setGenderData(data);// –∑–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ
  };

  const formik = useFormik({
    initialValues: {
      name: "",
    } as IFormGender,
    validationSchema:schema,
    validateOnChange:false,
    onSubmit: (values: IFormGender, { resetForm }) => {
      fetchGender(values.name);
      resetForm();
    },
  });

  // useEffect(()=> {
  //   fetchGender('dmitrii')
  // }, [])

  return (
    <>
      <h4>‚ú® Know name`s gender üîÆ </h4>
      <form onSubmit={formik.handleSubmit} className={styles.genderForm}>
        <input
          onChange={formik.handleChange}
          name="name"
          value={formik.values.name}
          placeholder="type name to analyze"
          type="text"
        />
        <button type="submit">send request</button>

        {genderData.name && (
          <p>
            {genderData.name} is {genderData.gender === "male" ? "üíÅ‚Äç‚ôÇÔ∏è" : "üíÅ‚Äç‚ôÄÔ∏è"}{" "}
            {genderData.probability * 100}%
          </p>
        )}
        {formik.errors.name && (
         <div className={styles.errorContainer}>
      <span>{formik.errors.name}</span>
      </div>
      )}
      </form>
     
    </>
  );
}
